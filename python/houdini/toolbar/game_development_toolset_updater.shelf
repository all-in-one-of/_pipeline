<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <tool name="update_toolset" label="Update Toolset" icon="CHOP_joystick">
    <helpURL>tool:update_toolset</helpURL>
    <script scriptType="python"><![CDATA[import os
import shutil
import contextlib
import json
import zipfile
import platform
import hou
import urllib2
import ssl


from hutil.Qt.QtCore import *
from hutil.Qt.QtGui import *
from hutil.Qt.QtWidgets import *

########################################################################################################################
# GLOBAL VARIABLES #####################################################################################################

REPO_URL = 'https://api.github.com/repos/sideeffects/GameDevelopmentToolset'

BRANCHES = ["Development"]
TOOLS_VERSION = 1

# store the major and minor version of Houdini (aka 16.5)
APP_VERSION = ".".join(map(str, hou.applicationVersion()[:2]))

SETTINGS_FILE = os.path.join(os.getenv("HOUDINI_USER_PREF_DIR"), "gamedevtoolset.json")
HOUDINI_ENV = os.path.join(os.getenv("HOUDINI_USER_PREF_DIR"), "houdini.env")

if platform.system() == "Windows":
    HOU_TEMP_PATH = os.path.join(os.getenv("APPDATA"), "SideFX", "GameDevToolset")
    HOU_TEMP_PATH_STR = "$APPDATA\\SideFX\\GameDevToolset"
else:
    HOU_TEMP_PATH = os.path.join(os.getenv("HOUDINI_USER_PREF_DIR"), "GameDevToolset")
    HOU_TEMP_PATH_STR = HOU_TEMP_PATH


# UPDATE DIALOG ########################################################################################################
class UpdateDialog(QDialog):
    def __init__(self, parent, updater_object):
        super(UpdateDialog, self).__init__(parent)
        self.setWindowTitle("Game Development Toolset")
        self.updater_object = updater_object

        self.current_version = None

        if self.updater_object.current_version:
            self.current_version = self.updater_object.current_version

        self.build_ui()

    def build_ui(self):
        installed_group = QGroupBox("Installed Version")
        change_group = QGroupBox("Change To")
        spacer = QLabel("")

        # Current Version
        current_version_layout = QHBoxLayout()
        current_version_lbl = QLabel("Release: ")
        current_version = self.current_version
        if not current_version:
            current_version = "Unknown"

        current_version_value_lbl = QLabel(current_version)

        current_version_layout.addWidget(current_version_lbl)
        current_version_layout.addWidget(current_version_value_lbl)

        installedgroup_layout = QVBoxLayout(installed_group)

        installedgroup_layout.addLayout(current_version_layout)

        # Update
        version_layout = QHBoxLayout()
        update_version_label = QLabel("Release:")

        self.version_combo = QComboBox(self)
        for release in self.updater_object.production_releases[:10]:
            self.version_combo.addItem(release)

        self.production_builds_check = QCheckBox("Production Builds Only")
        self.production_builds_check.setChecked(True)
        self.production_builds_check.stateChanged.connect(self.on_production_check)

        version_layout.addWidget(update_version_label)
        version_layout.addWidget(self.version_combo)
        version_layout.addWidget(self.production_builds_check)

        changedgroup_layout = QVBoxLayout(change_group)

        changedgroup_layout.addLayout(version_layout)

        self.button = QPushButton("Update")
        self.uninstallButton = QPushButton("Uninstall")

        self.button.clicked.connect(self.on_updatebtn_press)
        self.uninstallButton.clicked.connect(self.on_uninstallbtn_press)
        layout = QVBoxLayout()

        layout.addWidget(installed_group)
        layout.addWidget(change_group)

        layout.addWidget(spacer)
        layout.addWidget(self.button)
        layout.addWidget(self.uninstallButton)
        self.setLayout(layout)

    def on_production_check(self, state=None):
        self.version_combo.clear()
        if self.production_builds_check.isChecked():
            for release in self.updater_object.production_releases[:10]:
                self.version_combo.addItem(release)
        else:
            for release in self.updater_object.releases[:10]:
                self.version_combo.addItem(release)

    def on_updatebtn_press(self):
        version = self.version_combo.currentText()
        self.updater_object.on_dialog_close(version, "change")
        self.close()

    def on_uninstallbtn_press(self):
        version = self.version_combo.currentText()
        self.updater_object.on_dialog_close(version, "uninstall")
        self.close()


# UPDATER ##############################################################################################################
class GameDevelopmentUpdater(object):
    """
        Main updater object, gets called with the shelf button press


    """

    def __init__(self):

        # Store Releases and Production Releases
        self.releases = []
        self.production_releases = []

        self.desired_version = None

        # bail if not allowed in pipelines
        disabling_message = os.getenv("GAMEDEVTOOLSET_NOINSTALL_MESSAGE")
        if disabling_message:
            hou.ui.displayMessage(disabling_message)
            return

        self.cleanup_old_installs()
        self.load_settings()
        self.get_releases()
        self.show_dialog()

    def cleanup_old_installs(self):
        """ In an older version we left some stuff on the user's folders, we need to clean those out just in case """

        houdini_pref_dir = os.getenv("HOUDINI_USER_PREF_DIR")

        otl = os.path.join(houdini_pref_dir, "otls", "SideFX_GameDevelopmentToolset.hda")
        desktop = os.path.join(houdini_pref_dir, "desktop", "Games_Minimal.desk")
        toolbar = os.path.join(houdini_pref_dir, "toolbar", "game_development_toolset.shelf")
        script = os.path.join(houdini_pref_dir, "scripts", "python", "hou_settings.py")

        to_delete = [otl, desktop, toolbar, script]
        for filename in to_delete:
            if os.path.exists(filename):
                os.remove(filename)

    def get_releases(self):

        # Attempt to download things from github
        try:
            with contextlib.closing(urllib2.urlopen(urllib2.Request(REPO_URL + "/releases"), context=ssl._create_unverified_context())) as response:
                data = response.read()
                if data == "":
                    raise ValueError("Unable to get the release list")
        except:
            raise ValueError("Unable to connect to GitHub and download the Release List")
            return

        # Parse the data and filter out versions we don't care about
        j_data = json.loads(data.decode('utf-8'))
        for release in j_data:

            # Check for the tools version for when we bump to 2.0 or 3.0
            if release["tag_name"].split(".")[0] == str(TOOLS_VERSION):

                # we use gitHub's prerelase flag to determine which releases are production builds
                if not release["prerelease"]:
                    self.production_releases.append(release["tag_name"])

                self.releases.append(release["tag_name"])

    def show_dialog(self):
        dialog = UpdateDialog(hou.ui.mainQtWindow(), self)
        dialog.show()

    def download_url(self, url):
        """
            Download the zip file from github
        :param url:
        :return:
        """

        filename = os.path.basename(url)
        local_path = os.path.join(HOU_TEMP_PATH, filename)

        if not os.path.exists(os.path.dirname(local_path)):
            os.makedirs(os.path.dirname(local_path))

        try:
            zipfile = urllib2.urlopen(url, context=ssl._create_unverified_context())
            with open(local_path, 'wb') as output:
                output.write(zipfile.read())
        except:
            raise ValueError("Unable to download the package file :" + url)
            return

        return local_path

    def get_download_path(self, version):
        """
            Get the asset list for the version and isolate which file we want (the Zip file)
            With some logic built in if they select older versions

        :param version:
        :return:
        """
        try:
            with contextlib.closing(urllib2.urlopen(urllib2.Request(REPO_URL + "/releases/tags/" + version), context=ssl._create_unverified_context())) as response:
                data = response.read()
                if data == "":
                    raise ValueError("Unable to get the release tags")
        except:
            raise ValueError("Unable to reach Github and get the release tags")

        backup = None

        j_data = json.loads(data.decode('utf-8'))
        for asset in j_data["assets"]:

            url = os.path.basename(asset["browser_download_url"])

            # If we find something named HoudiniXX.X-Y.YY.zip that's the one we want
            if ("Houdini" + APP_VERSION) in url and "zip" in url:
                return asset["browser_download_url"]

            # For older versions we want to grab the Development branch of that version by default
            if "Development" in url and "zip" in url:
                backup = asset["browser_download_url"]

        return backup

    def unzip_file(self, zip_file, destination_path):
        zipf = zipfile.ZipFile(zip_file, 'r', zipfile.ZIP_DEFLATED)
        zipf.extractall(destination_path)

    def load_settings(self):
        try:
            with open(SETTINGS_FILE, 'r') as fp:
                settings = json.load(fp)
                self.current_version = settings["current_version"]
        except:
            self.current_version = None

    def store_settings(self):
        settings = {"current_version": self.desired_version, "current_branch": "Development"}
        with open(SETTINGS_FILE, 'w') as fp:
            json.dump(settings, fp)

    def show_success_dialog(self, mode):        
        message = ""
        
        if mode == "change":
            message = "Game Development Toolset Updated Successfully"
            message += "\n Please Restart Houdini to load all of the new tools"
        
        elif mode == "uninstall":
            message = "Game Development Toolset Uninstalled Successfully"
            message += "\n Please Restart Houdini for changes to take effect"
        
        hou.ui.displayMessage(message, title="Success")
        
    def on_dialog_close(self, version, mode):
        """ Call back from the Updater Dialog """
        self.desired_version = version

        if mode == "change":
            download_url = self.get_download_path(version)
            if not download_url:
                hou.ui.displayMessage("Package not Available for this Version", severity=hou.severityType.Error)
                return

            local_path = self.download_url(download_url)
            self.unzip_file(local_path, os.path.join(HOU_TEMP_PATH, APP_VERSION, version))

            os.remove(local_path)

            self.patch_houdini_env(version, "change")
            self.store_settings()
            self.show_success_dialog("change")

        elif mode == "uninstall":
            # Patch ENV var
            self.patch_houdini_env(version, "uninstall")
            self.desired_version = None
            self.store_settings()

            # Delete Installed Files
            removedir = os.path.join(HOU_TEMP_PATH, version)
            if os.path.exists(removedir):
                shutil.rmtree(removedir, ignore_errors=True)

            self.show_success_dialog("uninstall")

    def patch_houdini_env(self, version, mode):

        filepath = HOUDINI_ENV
        if platform.system() == "Windows":
            sep = ";"
            quote_char = ""
        else:
            sep = ":"
            quote_char = "\""

        to_write = []

        with open(filepath, "r") as fp:
            skip_next_line = False
            skipped_lines = 0
            for line in fp.readlines():
                if skip_next_line:
                    skipped_lines += 1

                    if skipped_lines >= 3:
                        if "PATH" in line:
                            continue
                        skip_next_line = False
                        skipped_lines = 0
                    continue

                if "# GAMES DEVELOPMENT TOOLSET " in line:
                    skip_next_line = True
                    continue

                to_write.append(line)

        if to_write[-1].strip() != "":
            to_write.append("\n")


        if mode == "change":
            to_write.append("# GAMES DEVELOPMENT TOOLSET \n")

            entry = "HOUDINI_PATH = "

            entry += quote_char + "$HOUDINI_PATH" + sep

            entry += os.path.join(HOU_TEMP_PATH_STR, APP_VERSION, version)

            entry += sep + "&" + quote_char + "\n"

            to_write.append(entry)

            path_entry = "PATH = "
            path_entry += quote_char + os.path.join(HOU_TEMP_PATH_STR, APP_VERSION, version , "bin")
            path_entry += sep + "$PATH" + quote_char + "\n"

            to_write.append(path_entry)


        with open(filepath, "w") as fp:
            for line in to_write:
                fp.write(line)


GameDevelopmentUpdater()
]]></script>
  </tool>
</shelfDocument>
