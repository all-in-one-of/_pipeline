<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <tool name="lop_sceneimportall" label="Scene Import (All)"
	icon="LOP_sceneimport">
    <helpURL>operator:Lop/instancer</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Lop/instancer</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Import</toolSubmenu>
    <script scriptType="python"><![CDATA[import loptoolutils
node = loptoolutils.genericTool(kwargs, 'sceneimport')
node.parm('objects').set('*')
node.parm('materials').set('*')
]]></script>
  </tool>

  <tool name="lop_sceneimportlights" label="Scene Import (Lights)"
	icon="LOP_sceneimport">
    <helpURL>operator:Lop/instancer</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Lop/instancer</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Import</toolSubmenu>
    <script scriptType="python"><![CDATA[import loptoolutils
node = loptoolutils.genericTool(kwargs, 'sceneimport')
node.parm('objects').set('*')
node.parm('filter').set('!!OBJ/LIGHT!!')
]]></script>
  </tool>

  <tool name="lop_sceneimportcams" label="Scene Import (Cameras)"
	icon="LOP_sceneimport">
    <helpURL>operator:Lop/instancer</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Lop/instancer</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Import</toolSubmenu>
    <script scriptType="python"><![CDATA[import loptoolutils
node = loptoolutils.genericTool(kwargs, 'sceneimport')
node.parm('objects').set('*')
node.parm('filter').set('!!OBJ/CAMERA!!')
]]></script>
  </tool>

  <tool name="lop_sceneimportmats" label="Scene Import (Materials)"
	icon="LOP_sceneimport">
    <helpURL>operator:Lop/instancer</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Lop/instancer</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Import</toolSubmenu>
    <script scriptType="python"><![CDATA[import loptoolutils
node = loptoolutils.genericTool(kwargs, 'sceneimport')
node.parm('materials').set('*')
]]></script>
  </tool>

  <tool name="lop_prune" label="Prune"
	icon="LOP_prune">
    <helpURL>operator:Lop/prune</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Lop/prune</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Utility</toolSubmenu>
    <script scriptType="python"><![CDATA[import loptoolutils
node = loptoolutils.genericTool(kwargs, 'prune', 'prune', selection_parm_name = 'primpattern1', selection_allow_pattern = True)
]]></script>
  </tool>

  <tool name="lop_addpointinstancer" label="Point Instancer" icon="LOP_instancer">
    <helpURL>operator:Lop/instancer</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Lop/instancer</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Instancing</toolSubmenu>
    <script scriptType="python"><![CDATA[
import loptoolutils

loptoolutils.createPointInstancer(
    kwargs, 'addpointinstancer', 'pointinstancer')
]]></script>
  </tool>

  <tool name="lop_instancetopoints" label="Instance to Points" icon="LOP_instancer">
    <helpURL>operator:Lop/instancer</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Lop/instancer</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Instancing</toolSubmenu>
    <script scriptType="python"><![CDATA[
import loptoolutils

loptoolutils.createPointInstancer(
    kwargs, 'instancetopoints', 'pointinstancer', sourcemode='second')
]]></script>
  </tool>

  <tool name="lop_copytopoints" label="Copy to Points" icon="LOP_instancer">
    <helpURL>operator:Lop/instancer</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Lop/instancer</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Instancing</toolSubmenu>
    <script scriptType="python"><![CDATA[
import loptoolutils

loptoolutils.createPointInstancer(
    kwargs, 'copytopoints', 'instanceablerefprims', sourcemode='second')
]]></script>
  </tool>

  <tool name="lop_optionblock" label="Context Options Block" icon="LOP_editcontextoptions">
    <helpURL>operator:Lop/editcontextoptions</helpURL>
    <toolMenuContext name="viewer">
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Lop/editcontextoptions</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Context Options</toolSubmenu>
    <script scriptType="python"><![CDATA[
import loptoolutils

(begin, end) = loptoolutils.buildBlockPair(kwargs, 'optionblock', 'begincontextoptionsblock', 'editcontextoptions', 0)
end.parm('createoptionsblock').set(True)
]]></script>
  </tool>

  <tool name="lop_setvariant" label="Set Variant" icon="LOP_setvariant">
    <helpURL>operator:Lop/setvariant</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Lop/setvariant</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Variants</toolSubmenu>
    <script scriptType="python"><![CDATA[import loptoolutils

node = loptoolutils.genericTool(kwargs, 'setvariant')
inputs = node.inputs()
if len(inputs) > 0:
    input = inputs[0]
    primpath = node.evalParm('primpath1')
    prim = input.stage().GetPrimAtPath(primpath)
    varsets = prim.GetVariantSets()
    varsetnames = varsets.GetNames()
    if len(varsetnames) > 0:
	varsetname = varsetnames[0]
	node.parm('variantset1').set(varsetname)
]]></script>
  </tool>

</shelfDocument>
